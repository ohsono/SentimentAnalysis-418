services:
  postgres:
    image: postgres:15
    container_name: ucla_sentiment_db
    environment:
      POSTGRES_USER: ${DB_USER:-sentiment_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sentiment_password}
      POSTGRES_DB: ${DB_NAME:-sentiment_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sentiment_user} -d ${DB_NAME:-sentiment_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - sentiment_network

  redis:
    image: redis:alpine
    container_name: ucla_sentiment_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-sentiment_redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-sentiment_redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - sentiment_network

  gateway-api:
    build:
      context: .
      dockerfile: Dockerfile.gateway-api
    container_name: ucla_gateway_api
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER:-sentiment_user}
      - DB_PASSWORD=${DB_PASSWORD:-sentiment_password}
      - DB_NAME=${DB_NAME:-sentiment_db}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
      - MODEL_SERVICE_URL=http://model-service-api:8081
      - WORKER_API_URL=http://worker-scraper-api:8082
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - POSTGRES_MAX_RETRY=5
      - POSTGRES_RETRY_INTERVAL=5
    volumes:
      - ./logs:/app/logs
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker-scraper-api:
        condition: service_started
      model-service-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - sentiment_network

  model-service-api:
    build:
      context: .
      dockerfile: Dockerfile.model-service-distilbert
    container_name: ucla_model_service
    environment:
      - HOST=0.0.0.0
      - PORT=8081
      - MODEL_CACHE_DIR=/app/models
      - PRELOAD_MODEL=distilbert-sentiment
    volumes:
      - model_cache:/app/models
      - ./logs:/app/logs
    ports:
      - "${MODEL_SERVICE_PORT:-8081}:8081"
    restart: unless-stopped
    networks:
      - sentiment_network

  worker-scraper-api:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: ucla_worker_service
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER:-sentiment_user}
      - DB_PASSWORD=${DB_PASSWORD:-sentiment_password}
      - DB_NAME=${DB_NAME:-sentiment_db}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
      - MODEL_SERVICE_URL=http://model-service-api:8081
      - HOST=0.0.0.0
      - PORT=8082
    volumes:
      - worker_data:/app/worker/data
      - ./logs/:/app/worker/logs
    ports:
      - "${WORKER_PORT:-8082}:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sentiment_network

  dashboard-service:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: ucla_dashboard
    environment:
      - API_URL=http://gateway-api:8080
      - DB_HOST=postgres
      - DB_USER=${DB_USER:-sentiment_user}
      - DB_PASSWORD=${DB_PASSWORD:-sentiment_password}
      - DB_NAME=${DB_NAME:-sentiment_db}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
      - STREAMLIT_HOME_PATH=/tmp/streamlit
    volumes:
      - streamlit_data:/tmp/streamlit
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    depends_on:
      - gateway-api
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - sentiment_network

networks:
  sentiment_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  model_cache:
    driver: local
  worker_data:
    driver: local
  streamlit_data:
    driver: local
