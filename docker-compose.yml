services:
  # Database service (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: sentiment_db
    environment:
      POSTGRES_USER: ${DB_USER:-sentiment_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sentiment_password}
      POSTGRES_DB: ${DB_NAME:-sentiment_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - /Volumes/T7_Touch/Projects/UCLA-MASDS/SentimentAnalysis-418/data:/var/lib/postgresql/data
#      - postgres_data:/var/lib/postgresql/data
      - /Volumes/T7_Touch/Projects/UCLA-MASDS/SentimentAnalysis-418/init_scripts:/docker-entrypoint-initdb.d:ro
      - /Volumes/T7_Touch/Projects/UCLA-MASDS/SentimentAnalysis-418/init_scripts/database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sentiment_user} -d ${DB_NAME:-sentiment_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - sentiment_network_fixed

  # postgres:
  #   image: postgres:15
  #   container_name: sentiment_db
  #   environment:
  #     POSTGRES_USER: ${DB_USER:-sentiment_user}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-sentiment_password}
  #     POSTGRES_DB: ${DB_NAME:-sentiment_db}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init_scripts:/docker-entrypoint-initdb.d
  #   ports:
  #     - "${DB_PORT:-5432}:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sentiment_user} -d ${DB_NAME:-sentiment_db}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
  #   networks:
  #     - sentiment_network


  # Redis service (Task queue and caching)
  redis:
    image: redis:7-alpine
    container_name: sentiment_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-sentiment_redis} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-sentiment_redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - sentiment_network_fixed

  # redis:
  #   image: redis:alpine
  #   container_name: sentiment_redis
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-sentiment_redis}
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-sentiment_redis}", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
  #   networks:
  #     - sentiment_network


  # Fixed Model Service (VADER + HuggingFace with proper fallback)
  model-service:
    image: ohsonoresearch/model-service:latest
    build:
      context: .
      dockerfile: Dockerfile.model-service
    container_name: model_service
    environment:
      - HOST=0.0.0.0
      - PORT=8081
      - MODEL_CACHE_DIR=/app/models
      - NLTK_DATA=/app/nltk_data
      - PYTHONPATH=/app
    volumes:
      - model_cache:/app/models
      - nltk_data:/app/nltk_data
      - ./logs:/app/logs
    ports:
      - "${MODEL_SERVICE_PORT:-8081}:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - sentiment_network_fixed

  # model-service:
  #   image: ohsonoresearch/model-service:latest
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.model-service-distilbert
  #   container_name: model_service
  #   environment:
  #     - HOST=0.0.0.0
  #     - PORT=8081
  #     - MODEL_CACHE_DIR=/app/models
  #     - PRELOAD_MODEL=distilbert-sentiment
  #   volumes:
  #     - model_cache:/app/models
  #     - ./logs:/app/logs
  #   ports:
  #     - "${MODEL_SERVICE_PORT:-8081}:8081"
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - sentiment_network


  # Worker Scraper Service (Reddit data collection)
  worker-scraper-service:
    image: ohsonoresearch/worker-scraper-service:latest
    build:
      context: .
      dockerfile: Dockerfile.worker-scraper-service
    container_name: worker_scraper_service
    environment:
      - DB_HOST=${POSTGRES_HOST:-postgres}
      - DB_USER=${POSTGRES_USER:-ucla_app_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-app_user_pwd_123}
      - DB_NAME=${POSTGRES_DB:-sentiment_db}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
      - MODEL_SERVICE_URL=http://model-service:8081
      - HOST=0.0.0.0
      - PORT=8082
      - PYTHONPATH=/app
      # Reddit API credentials
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT:-UCLA_STATS418_Sentiment_Analysis}
    volumes:
      - worker_data:/app/worker/data
      #- ./logs:/app/worker/logs
    ports:
      - "${WORKER_PORT:-8082}:8082"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - sentiment_network_fixed

  # worker-scraper-service:
  #   image: ohsonoresearch/worker-scraper-service:latest
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.worker-scraper-service
  #   container_name: worker_scraper_service
  #   environment:
  #     - DB_HOST=postgres
  #     - DB_USER=${DB_USER:-sentiment_user}
  #     - DB_PASSWORD=${DB_PASSWORD:-sentiment_password}
  #     - DB_NAME=${DB_NAME:-sentiment_db}
  #     - DB_PORT=5432
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
  #     - MODEL_SERVICE_URL=http://model-service:8081
  #     - HOST=0.0.0.0
  #     - PORT=8082
  #   volumes:
  #     - worker_data:/app/worker/data
  #     - ./logs/:/app/worker/logs
  #   ports:
  #     - "${WORKER_PORT:-8082}:8082"
  #   depends_on:
  #     postgres:
  #       condition: service_started
  #     redis:
  #       condition: service_started
  #   restart: unless-stopped
  #   networks:
  #     - sentiment_network




  # dashboard-service:
  #   image: ohsonoresearch/dashboard-service:latest
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dashboard-service
  #   container_name: dashboard_service
  #   environment:
  #     - API_URL=http://gateway-api-service:8080
  #     - DB_HOST=postgres
  #     - DB_USER=${DB_USER:-sentiment_user}
  #     - DB_PASSWORD=${DB_PASSWORD:-sentiment_password}
  #     - DB_NAME=${DB_NAME:-sentiment_db}
  #     - DB_PORT=5432
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
  #     - STREAMLIT_HOME_PATH=/tmp/streamlit
  #   volumes:
  #     - streamlit_data:/tmp/streamlit
  #   ports:
  #     - "${DASHBOARD_PORT:-8501}:8501"
  #   depends_on:
  #     - gateway-api-service
  #     - redis
  #     - postgres
  #     - model-service
  #   restart: unless-stopped
  #   networks:
  #     - sentiment_network


  # Dashboard Service (Streamlit web interface)
  dashboard-service:
    image: ohsonoresearch/dashboard-service:latest
    build:
      context: .
      dockerfile: Dockerfile.dashboard-service
    container_name: dashboard_service
    environment:
      - API_URL=http://gateway-api-service:8080
      - DB_HOST=${POSTGRES_HOST:-postgres}
      - DB_USER=${POSTGRES_USER:-ucla_app_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-app_user_pwd_123}
      - DB_NAME=${POSTGRES_DB:-sentiment_db}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - PYTHONPATH=/app
    volumes:
      - streamlit_data:/tmp/streamlit
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    depends_on:
      gateway-api-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - sentiment_network_fixed


  # Gateway API Service (Main orchestration service)
  gateway-api-service:
    image: ohsonoresearch/gateway-api-service:latest
    build:
      context: .
      dockerfile: Dockerfile.gateway-api-service
    container_name: gateway_api_service
    environment:
      - DB_HOST=${POSTGRES_HOST:-postgres}
      - DB_USER=${POSTGRES_USER:-ucla_app_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-app_user_pwd_123}
      - DB_NAME=${POSTGRES_DB:-sentiment_db}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
      - MODEL_SERVICE_URL=http://model-service:8081
      - WORKER_API_URL=http://worker-scraper-service:8082
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - POSTGRES_MAX_RETRY=5
      - POSTGRES_RETRY_INTERVAL=5
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_healthy
      model-service:
        condition: service_healthy
      worker-scraper-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    networks:
      - sentiment_network_fixed

# Networks
networks:
  sentiment_network_fixed:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

  # gateway-api-service:
  #   image: ohsonoresearch/gateway-api-service:latest
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.gateway-api-service
  #   container_name: gateway_api_service
  #   environment:
  #     - DB_HOST=postgres
  #     - DB_USER=${DB_USER:-sentiment_user}
  #     - DB_PASSWORD=${DB_PASSWORD:-sentiment_password}
  #     - DB_NAME=${DB_NAME:-sentiment_db}
  #     - DB_PORT=5432
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-sentiment_redis}
  #     - MODEL_SERVICE_URL=http://model-service:8081
  #     - WORKER_API_URL=http://worker-scraper-service:8082
  #     - API_HOST=0.0.0.0
  #     - API_PORT=8080
  #     - POSTGRES_MAX_RETRY=5
  #     - POSTGRES_RETRY_INTERVAL=5
  #   volumes:
  #     - ./logs:/app/logs
  #   ports:
  #     - "${GATEWAY_PORT:-8080}:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     worker-scraper-service:
  #       condition: service_started
  #     model-service:
  #       condition: service_started
  #   restart: unless-stopped
  #   networks:
  #     - sentiment_network



# networks:
#   sentiment_network:
#     driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_cache:
    driver: local
  nltk_data:
    driver: local
  worker_data:
    driver: local
  streamlit_data:
    driver: local


# # Volumes
# volumes:
#   postgres_data_fixed:
#     driver: local
#   redis_data_fixed:
#     driver: local
#   model_cache_fixed:
#     driver: local
#   nltk_data_fixed:
#     driver: local
#   worker_data_fixed:
#     driver: local
#   streamlit_data_fixed:
#     driver: local
